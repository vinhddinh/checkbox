import Head from "next/head";
import { getSession, useSession } from "next-auth/react";
import NavBar from "/components/Navbar";
import CheckList from "/components/CheckList";
import SearchBar from "/components/SearchBar";
import { Container, Row } from "react-bootstrap";
import { useEffect, useState } from "react";

// load todos server side
// because if a user is not logged in, session returns null
// we want to load the todos of a default email, "public@dinh.cc" in this case
// not the best way to do this, but it works for now
export async function getServerSideProps(context) {
  const session = await getSession(context);
  const emailToQuery = session ? session.user.email : "public@dinh.cc";

  const todos = JSON.parse(
    JSON.stringify(
      await prisma.todo.findMany({
        where: {
          user: {
            email: emailToQuery,
          },
        },
      })
    )
  );

  return { props: { todos, emailToQuery } };
}

export default function Home({ todos, emailToQuery }) {
  const { data: session } = useSession();
  const [todosState, setTodosState] = useState(todos);
  const [todosToDisplay, setTodosToDisplay] = useState(todos);
  const [filter, setFilter] = useState([]);
  const [sort, setSort] = useState("dueDate");
  // Stores the todosState "underneath", and display filtered todos

  useEffect(() => {
    setTodosToDisplay(todosState);
  }, [todosState]);

  useEffect(() => {
    let filteredTodos = todosState;

    if (filter.search) {
      filteredTodos = filteredTodos.filter((todo) =>
        todo.title.toLowerCase().includes(filter.search.toLowerCase())
      );
    }

    switch (filter.by) {
      case "completed":
        filteredTodos = filteredTodos.filter((todo) => todo.completed);
        break;
      case "incomplete":
        filteredTodos = filteredTodos.filter((todo) => !todo.completed);
        break;
      default:
        break;
    }

    switch (sort) {
      case "dueDate":
        filteredTodos = filteredTodos.sort((a, b) => {
          if (a.dueDate < b.dueDate) {
            return -1;
          } else if (a.dueDate > b.dueDate) {
            return 1;
          } else {
            return 0;
          }
        });
        break;
      case "createdAt":
        filteredTodos = filteredTodos.sort((a, b) => {
          if (a.createdAt < b.createdAt) {
            return -1;
          } else if (a.createdAt > b.createdAt) {
            return 1;
          } else {
            return 0;
          }
        });
        break;
      default:
        break;
    }

    setTodosToDisplay(filteredTodos);
  }, [filter, sort, todosState]);

  // requests a new todo object from the server before rendering it
  async function addTodo() {
    const newTodoObj = {
      title: "",
      description: "",
      completed: false,
      email: emailToQuery,
    };
    const response = await fetch("/api/todos", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(newTodoObj),
    });
    const TodoFromServer = await response.json();
    setTodosState([...todosState, TodoFromServer]);
  }

  async function reloadTodos() {
    const response = await fetch(`/api/users/${emailToQuery}/todos`);
    const todosFromServer = await response.json();
    setTodosState(todosFromServer);
  }

  return (
    <>
      <Head>
        <title>Checkbox</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="main">
        <Container className="d-flex flex-column">
          <NavBar session={session} />
          <SearchBar
            onFocus={reloadTodos}
            filter={filter}
            setFilter={setFilter}
            setSort={setSort}
          />
          <CheckList items={todosToDisplay} session={session} />
          <Row className="whitespace" onClick={addTodo} />
        </Container>
      </main>
    </>
  );
}
